<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ModernWpf</name>
    </assembly>
    <members>
        <member name="T:ModernWpf.ColorPaletteResources">
            <summary>
            Represents a specialized resource dictionary that contains color resources used
            by XAML elements.
            </summary>
        </member>
        <member name="M:ModernWpf.ColorPaletteResources.#ctor">
            <summary>
            Initializes a new instance of the ColorPaletteResources class.
            </summary>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.Accent">
            <summary>
            Gets or sets the Accent color value.
            </summary>
            <returns>The Accent color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.AltHigh">
            <summary>
            Gets or sets the AltHigh color value.
            </summary>
            <returns>The AltHigh color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.AltLow">
            <summary>
            Gets or sets the AltLow color value.
            </summary>
            <returns>The AltLow color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.AltMedium">
            <summary>
            Gets or sets the AltMedium color value.
            </summary>
            <returns>The AltMedium color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.AltMediumHigh">
            <summary>
            Gets or sets the AltMediumHigh color value.
            </summary>
            <returns>The AltMediumHigh color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.AltMediumLow">
            <summary>
            Gets or sets the AltMediumLow color value.
            </summary>
            <returns>The AltMediumLow color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.BaseHigh">
            <summary>
            Gets or sets the BaseHigh color value.
            </summary>
            <returns>The BaseHigh color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.BaseLow">
            <summary>
            Gets or sets the BaseLow color value.
            </summary>
            <returns>The BaseLow color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.BaseMedium">
            <summary>
            Gets or sets the BaseMedium color value.
            </summary>
            <returns>The BaseMedium color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.BaseMediumHigh">
            <summary>
            Gets or sets the BaseMediumHigh color value.
            </summary>
            <returns>The BaseMediumHigh color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.BaseMediumLow">
            <summary>
            Gets or sets the BaseMediumLow color value.
            </summary>
            <returns>The BaseMediumLow color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeAltLow">
            <summary>
            Gets or sets the ChromeAltLow color value.
            </summary>
            <returns>The ChromeAltLow color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeBlackHigh">
            <summary>
            Gets or sets the ChromeBlackHigh color value.
            </summary>
            <returns>The ChromeBlackHigh color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeBlackLow">
            <summary>
            Gets or sets the ChromeBlackLow color value.
            </summary>
            <returns>The ChromeBlackLow color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeBlackMedium">
            <summary>
            Gets or sets the ChromeBlackMedium color value.
            </summary>
            <returns>The ChromeBlackMedium color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeBlackMediumLow">
            <summary>
            Gets or sets the ChromeBlackMediumLow color value.
            </summary>
            <returns>The ChromeBlackMediumLow color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeDisabledHigh">
            <summary>
            Gets or sets the ChromeDisabledHigh color value.
            </summary>
            <returns>The ChromeDisabledHigh color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeDisabledLow">
            <summary>
            Gets or sets the ChromeDisabledLow color value.
            </summary>
            <returns>The ChromeDisabledLow color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeGray">
            <summary>
            Gets or sets the ChromeGray color value.
            </summary>
            <returns>The ChromeGray color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeHigh">
            <summary>
            Gets or sets the ChromeHigh color value.
            </summary>
            <returns>The ChromeHigh color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeLow">
            <summary>
            Gets or sets the ChromeLow color value.
            </summary>
            <returns>The ChromeLow color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeMedium">
            <summary>
            Gets or sets the ChromeMedium color value.
            </summary>
            <returns>The ChromeMedium color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeMediumLow">
            <summary>
            Gets or sets the ChromeMediumLow color value.
            </summary>
            <returns>The ChromeMediumLow color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ChromeWhite">
            <summary>
            Gets or sets the ChromeWhite color value.
            </summary>
            <returns>The ChromeWhite color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ErrorText">
            <summary>
            Gets or sets the ErrorText color value.
            </summary>
            <returns>The ErrorText color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ListLow">
            <summary>
            Gets or sets the ListLow color value.
            </summary>
            <returns>The ListLow color value.</returns>
        </member>
        <member name="P:ModernWpf.ColorPaletteResources.ListMedium">
            <summary>
            Gets or sets the ListMedium color value.
            </summary>
            <returns>The ListMedium color value.</returns>
        </member>
        <member name="T:ModernWpf.TypedEventHandler`2">
            <summary>
            Represents a method that handles general events.
            </summary>
            <typeparam name="TSender"></typeparam>
            <typeparam name="TResult"></typeparam>
            <param name="sender">The event source.</param>
            <param name="args">The event data. If there is no event data, this parameter will be null.</param>
        </member>
        <member name="T:ModernWpf.Controls.ContentPresenterEx">
            <summary>
            ContentPresenter is used within the template of a content control to denote the
            place in the control's visual tree (control template) where the content
            is to be added.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.ContentPresenterEx.FontFamilyProperty">
            <summary>
            DependencyProperty for <see cref="P:ModernWpf.Controls.ContentPresenterEx.FontFamily" /> property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ContentPresenterEx.FontFamily">
            <summary>
            The FontFamily property specifies the name of font family.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.ContentPresenterEx.FontStyleProperty">
            <summary>
            DependencyProperty for <see cref="P:ModernWpf.Controls.ContentPresenterEx.FontStyle" /> property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ContentPresenterEx.FontStyle">
            <summary>
            The FontStyle property requests normal, italic, and oblique faces within a font family.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.ContentPresenterEx.FontWeightProperty">
            <summary>
            DependencyProperty for <see cref="P:ModernWpf.Controls.ContentPresenterEx.FontWeight" /> property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ContentPresenterEx.FontWeight">
            <summary>
            The FontWeight property specifies the weight of the font.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.ContentPresenterEx.FontStretchProperty">
            <summary>
            DependencyProperty for <see cref="P:ModernWpf.Controls.ContentPresenterEx.FontStretch" /> property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ContentPresenterEx.FontStretch">
            <summary>
            The FontStretch property selects a normal, condensed, or extended face from a font family.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.ContentPresenterEx.FontSizeProperty">
            <summary>
            DependencyProperty for <see cref="P:ModernWpf.Controls.ContentPresenterEx.FontSize" /> property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ContentPresenterEx.FontSize">
            <summary>
            The FontSize property specifies the size of the font.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.ContentPresenterEx.ForegroundProperty">
            <summary>
            DependencyProperty for <see cref="P:ModernWpf.Controls.ContentPresenterEx.Foreground" /> property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ContentPresenterEx.Foreground">
            <summary>
            The Foreground property specifies the foreground brush of an element's text content.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.ContentPresenterEx.LineHeightProperty">
            <summary>
            DependencyProperty for <see cref="P:ModernWpf.Controls.ContentPresenterEx.LineHeight" /> property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ContentPresenterEx.LineHeight">
            <summary>
            The LineHeight property specifies the height of each generated line box.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.ContentPresenterEx.LineStackingStrategyProperty">
            <summary>
            DependencyProperty for <see cref="P:ModernWpf.Controls.ContentPresenterEx.LineStackingStrategy" /> property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ContentPresenterEx.LineStackingStrategy">
            <summary>
            The LineStackingStrategy property specifies how lines are placed
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.ContentPresenterEx.TextWrappingProperty">
            <summary>
            DependencyProperty for <see cref="P:ModernWpf.Controls.ContentPresenterEx.TextWrapping" /> property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ContentPresenterEx.TextWrapping">
            <summary>
            The TextWrapping property controls whether or not text wraps 
            when it reaches the flow edge of its containing block box.
            </summary>
        </member>
        <member name="T:ModernWpf.Controls.ListViewBaseHeaderItem">
            <summary>
            Provides the infrastructure for the ListViewHeaderItem and GridViewHeaderItem
            classes.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.ListViewBaseHeaderItem.UseSystemFocusVisualsProperty">
            <summary>
            Identifies the UseSystemFocusVisuals dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ListViewBaseHeaderItem.UseSystemFocusVisuals">
            <summary>
            Gets or sets a value that indicates whether the control uses focus visuals that
            are drawn by the system or those defined in the control template.
            </summary>
            <returns>
            **true** if the control uses focus visuals drawn by the system; **false** if
            the control uses focus visuals defined in the ControlTemplate. The default is
            **false**; see Remarks.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.ListViewBaseHeaderItem.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ListViewBaseHeaderItem.CornerRadius">
            <summary>
            Gets or sets the radius for the corners of the control's border.
            </summary>
            <returns>
            The degree to which the corners are rounded, expressed as values of the CornerRadius
            structure.
            </returns>
        </member>
        <member name="T:ModernWpf.Controls.ListViewHeaderItem">
            <summary>
            Represents items in the header for grouped data inside a ListView.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.ListViewHeaderItem.#ctor">
            <summary>
            Initializes a new instance of the ListViewHeaderItem class.
            </summary>
        </member>
        <member name="T:ModernWpf.Controls.PasswordRevealMode">
            <summary>
            Defines constants that specify the password reveal behavior of a PasswordBox.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.PasswordRevealMode.Peek">
            <summary>
            The password reveal button is visible. The password is not obscured while the
            button is pressed.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.PasswordRevealMode.Hidden">
            <summary>
            The password reveal button is not visible. The password is always obscured.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.PasswordRevealMode.Visible">
            <summary>
            The password reveal button is not visible. The password is not obscured.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.ComboBoxHelper.TextBoxStyleProperty">
            <summary>
            Identifies the TextBoxStyle dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ComboBoxHelper.GetTextBoxStyle(System.Windows.Controls.ComboBox)">
            <summary>
            Gets the style of the TextBox in the ComboBox when the ComboBox is editable.
            </summary>
            <param name="comboBox">The element from which to read the property value.</param>
            <returns>The style of the TextBox in the ComboBox when the ComboBox is editable.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ComboBoxHelper.SetTextBoxStyle(System.Windows.Controls.ComboBox,System.Windows.Style)">
            <summary>
            Sets the style of the TextBox in the ComboBox when the ComboBox is editable.
            </summary>
            <param name="comboBox">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.GetCornerRadius(System.Windows.Controls.Control)">
            <summary>
            Gets the radius for the corners of the control's border.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>
            The degree to which the corners are rounded, expressed as values of the CornerRadius
            structure.
            </returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.SetCornerRadius(System.Windows.Controls.Control,System.Windows.CornerRadius)">
            <summary>
            Sets the radius for the corners of the control's border.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.ControlHelper.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.ControlHelper.HeaderProperty">
            <summary>
            Identifies the Header dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.GetHeader(System.Windows.Controls.Control)">
            <summary>
            Gets the content for the control's header.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>The content of the control's header. The default is **null**.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.SetHeader(System.Windows.Controls.Control,System.Object)">
            <summary>
            Sets the content for the control's header.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.ControlHelper.HeaderTemplateProperty">
            <summary>
            Identifies the HeaderTemplate dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.GetHeaderTemplate(System.Windows.Controls.Control)">
            <summary>
            Gets the DataTemplate used to display the content of the control's header.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>
            The template that specifies the visualization of the header object. The default
            is **null**.
            </returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.SetHeaderTemplate(System.Windows.Controls.Control,System.Windows.DataTemplate)">
            <summary>
            Sets the DataTemplate used to display the content of the control's header.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.GetPlaceholderText(System.Windows.Controls.Control)">
            <summary>
            Gets the text that is displayed in the control until the value is changed
            by a user action or some other operation.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>
            The text that is displayed in the control when no value is entered. The default
            is an empty string ("").
            </returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.SetPlaceholderText(System.Windows.Controls.Control,System.String)">
            <summary>
            Sets the text that is displayed in the control until the value is changed
            by a user action or some other operation.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.ControlHelper.PlaceholderTextProperty">
            <summary>
            Identifies the PlaceholderText dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.GetPlaceholderForeground(System.Windows.Controls.Control)">
            <summary>
            Gets a brush that describes the color of placeholder text.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>The brush that describes the color of placeholder text.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.SetPlaceholderForeground(System.Windows.Controls.Control,System.Windows.Media.Brush)">
            <summary>
            Sets a brush that describes the color of placeholder text.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.ControlHelper.PlaceholderForegroundProperty">
            <summary>
            Identifies the PlaceholderForeground dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.GetDescription(System.Windows.Controls.Control)">
            <summary>
            Gets content that is shown below the control. The content should provide
            guidance about the input expected by the control.
            </summary>
            <param name="control">The element from which to read the property value.</param>
            <returns>The content to be displayed below the control. The default is **null**.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.ControlHelper.SetDescription(System.Windows.Controls.Control,System.Object)">
            <summary>
            Sets content that is shown below the control. The content should provide
            guidance about the input expected by the control.
            </summary>
            <param name="control">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.ControlHelper.DescriptionProperty">
            <summary>
            Identifies the Description dependency property.
            </summary>
        </member>
        <member name="T:ModernWpf.Controls.Primitives.DataGridCellPresenter">
            <summary>
            Represents the visual elements of a DataGridCell.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.DataGridCellPresenter.#ctor">
            <summary>
            Initializes a new instance of the DataGridCellPresenter class.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.GetFocusVisualPrimaryBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the brush used to draw the outer border of a HighVisibility focus
            visual for a FrameworkElement.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>The brush used to draw the outer border of a HighVisibility focus visual.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.SetFocusVisualPrimaryBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the brush used to draw the outer border of a HighVisibility focus
            visual for a FrameworkElement.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.FocusVisualHelper.FocusVisualPrimaryBrushProperty">
            <summary>
            Identifies the FocusVisualPrimaryBrush dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.GetFocusVisualSecondaryBrush(System.Windows.FrameworkElement)">
            <summary>
            Gets the brush used to draw the inner border of a HighVisibility focus
            visual for a FrameworkElement.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>The brush used to draw the inner border of a HighVisibility focus visual.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.SetFocusVisualSecondaryBrush(System.Windows.FrameworkElement,System.Windows.Media.Brush)">
            <summary>
            Sets the brush used to draw the inner border of a HighVisibility focus
            visual for a FrameworkElement.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.FocusVisualHelper.FocusVisualSecondaryBrushProperty">
            <summary>
            Identifies the FocusVisualSecondaryBrush dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.GetFocusVisualPrimaryThickness(System.Windows.FrameworkElement)">
            <summary>
            Gets the thickness of the outer border of a HighVisibility focus visual
            for a FrameworkElement.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>
            The thickness of the outer border of a HighVisibility focus visual. The default
            value is 2.
            </returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.SetFocusVisualPrimaryThickness(System.Windows.FrameworkElement,System.Windows.Thickness)">
            <summary>
            Sets the thickness of the outer border of a HighVisibility focus visual
            for a FrameworkElement.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.FocusVisualHelper.FocusVisualPrimaryThicknessProperty">
            <summary>
            Identifies the FocusVisualPrimaryThickness dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.GetFocusVisualSecondaryThickness(System.Windows.FrameworkElement)">
            <summary>
            Gets the thickness of the inner border of a HighVisibility focus visual
            for a FrameworkElement.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>
            The thickness of the inner border of a HighVisibility focus visual. The default
            value is 1.
            </returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.SetFocusVisualSecondaryThickness(System.Windows.FrameworkElement,System.Windows.Thickness)">
            <summary>
            Sets the thickness of the inner border of a HighVisibility focus visual
            for a FrameworkElement.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.FocusVisualHelper.FocusVisualSecondaryThicknessProperty">
            <summary>
            Identifies the FocusVisualSecondaryThickness dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.GetFocusVisualMargin(System.Windows.FrameworkElement)">
            <summary>
            Gets the outer margin of the focus visual for a FrameworkElement.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>
            Provides margin values for the focus visual. The default value is a default Thickness
            with all properties (dimensions) equal to 0.
            </returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.SetFocusVisualMargin(System.Windows.FrameworkElement,System.Windows.Thickness)">
            <summary>
            Sets the outer margin of the focus visual for a FrameworkElement.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.FocusVisualHelper.FocusVisualMarginProperty">
            <summary>
            Identifies the FocusVisualMargin dependency property.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.FocusVisualHelper.UseSystemFocusVisualsProperty">
            <summary>
            Identifies the UseSystemFocusVisuals dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.GetUseSystemFocusVisuals(System.Windows.Controls.Control)">
            <summary>
            Gets a value that indicates whether the control uses focus visuals that
            are drawn by the system or those defined in the control template.
            </summary>
            <param name="control">The object from which the property value is read.</param>
            <returns>
            **true** if the control uses focus visuals drawn by the system; **false** if
            the control uses focus visuals defined in the ControlTemplate. The default is
            **false**; see Remarks.
            </returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.SetUseSystemFocusVisuals(System.Windows.Controls.Control,System.Boolean)">
            <summary>
            Sets a value that indicates whether the control uses focus visuals that
            are drawn by the system or those defined in the control template.
            </summary>
            <param name="control">The object to which the property value is written.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.FocusVisualHelper.IsTemplateFocusTargetProperty">
            <summary>
            Identifies the Control.IsTemplateFocusTarget XAML attached property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.GetIsTemplateFocusTarget(System.Windows.FrameworkElement)">
            <summary>
            Gets the value of the Control.IsTemplateFocusTarget XAML attached property for
            the target element.
            </summary>
            <param name="element">The object from which the property value is read.</param>
            <returns>
            The Control.IsTemplateFocusTarget XAML attached property value of the specified
            object.
            </returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.SetIsTemplateFocusTarget(System.Windows.FrameworkElement,System.Boolean)">
            <summary>
            Sets the value of the Control.IsTemplateFocusTarget XAML attached property for
            a target element.
            </summary>
            <param name="element">The object to which the property value is written.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.FocusVisualAdorner.MeasureOverride(System.Windows.Size)">
            <summary>
            Measure adorner. Default behavior is to size to match the adorned element.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.FocusVisualAdorner.ArrangeOverride(System.Windows.Size)">
            <summary>
                Default control arrangement is to only arrange
                the first visual child. No transforms will be applied.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.Primitives.FocusVisualHelper.FocusVisualAdorner.VisualChildrenCount">
             <summary>
              Derived classes override this property to enable the Visual code to enumerate
              the Visual children. Derived classes need to return the number of children
              from this method.
            
                By default a Visual does not have any children.
            
              Remark:
                  During this virtual method the Visual tree must not be modified.
             </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.FocusVisualHelper.FocusVisualAdorner.GetVisualChild(System.Int32)">
             <summary>
               Derived class must implement to support Visual children. The method must return
                the child at the specified index. Index must be between 0 and GetVisualChildrenCount-1.
            
                By default a Visual does not have any children.
            
              Remark:
                   During this virtual call it is not valid to modify the Visual tree.
             </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.PasswordBoxHelper.GetPasswordRevealMode(System.Windows.Controls.PasswordBox)">
            <summary>
            Gets a value that specifies whether the password is always, never, or
            optionally obscured.
            </summary>
            <param name="passwordBox">The element from which to read the property value.</param>
            <returns>
            A value of the enumeration that specifies whether the password is always, never,
            or optionally obscured. The default is **Peek**.
            </returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.PasswordBoxHelper.SetPasswordRevealMode(System.Windows.Controls.PasswordBox,ModernWpf.Controls.PasswordRevealMode)">
            <summary>
            Sets a value that specifies whether the password is always, never, or
            optionally obscured.
            </summary>
            <param name="passwordBox">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.PasswordBoxHelper.PasswordRevealModeProperty">
            <summary>
            Identifies the PasswordRevealMode dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.Primitives.PopupPositioner.PlacementInternal">
            <summary>
                Tooltips should show on Keyboard focus.
                Chooses the behavior of where the Popup should be placed on screen.
                Takes into account TreatMousePlacementAsBottom to place tooltips correctly on keyboard focus.
            </summary>
        </member>
        <member name="T:ModernWpf.Controls.Primitives.ScrollingIndicatorMode">
            <summary>
            Defines constants that specify input-specific transition animations that are
            part of the default template for ScrollBar.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.ScrollingIndicatorMode.None">
            <summary>
            Do not use input-specific transitions.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.ScrollingIndicatorMode.TouchIndicator">
            <summary>
            Use input-specific transitions that are appropriate for touch input.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.ScrollingIndicatorMode.MouseIndicator">
            <summary>
            Use input-specific transitions that are appropriate for mouse input.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.GetCollapsedGlyph(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the glyph to show for a collapsed tree node.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The glyph to show for a collapsed tree node.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.SetCollapsedGlyph(System.Windows.Controls.TreeViewItem,System.String)">
            <summary>
            Sets the glyph to show for a collapsed tree node.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.TreeViewItemHelper.CollapsedGlyphProperty">
            <summary>
            Identifies the CollapsedGlyph dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.GetExpandedGlyph(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the glyph to show for an expanded tree node.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The glyph to show for an expanded tree node.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.SetExpandedGlyph(System.Windows.Controls.TreeViewItem,System.String)">
            <summary>
            Sets the glyph to show for an expanded tree node.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.TreeViewItemHelper.ExpandedGlyphProperty">
            <summary>
            Identifies the ExpandedGlyph dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.GetCollapsedPath(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the path to show for a collapsed tree node.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The glyph to show for a collapsed tree node.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.SetCollapsedPath(System.Windows.Controls.TreeViewItem,System.Windows.Media.Geometry)">
            <summary>
            Sets the path to show for a collapsed tree node.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.TreeViewItemHelper.CollapsedPathProperty">
            <summary>
            Identifies the CollapsedPath dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.GetExpandedPath(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the glyph to show for an expanded tree node.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The glyph to show for an expanded tree node.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.SetExpandedPath(System.Windows.Controls.TreeViewItem,System.Windows.Media.Geometry)">
            <summary>
            Sets the glyph to show for an expanded tree node.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.TreeViewItemHelper.ExpandedPathProperty">
            <summary>
            Identifies the ExpandedPath dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.GetGlyphBrush(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the Brush used to paint node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The Brush used to paint node glyphs on a TreeView.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.SetGlyphBrush(System.Windows.Controls.TreeViewItem,System.Windows.Media.Brush)">
            <summary>
            Sets the Brush used to paint node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.TreeViewItemHelper.GlyphBrushProperty">
            <summary>
            Identifies the GlyphBrush dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.GetGlyphOpacity(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the opacity of node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The opacity of node glyphs on a TreeView.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.SetGlyphOpacity(System.Windows.Controls.TreeViewItem,System.Double)">
            <summary>
            Sets the opacity of node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.TreeViewItemHelper.GlyphOpacityProperty">
            <summary>
            Identifies the GlyphOpacity dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.GetGlyphSize(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the size of node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The opacity of size glyphs on a TreeView.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.SetGlyphSize(System.Windows.Controls.TreeViewItem,System.Double)">
            <summary>
            Sets the size of node glyphs on a TreeView.
            </summary>
            <param name="treeViewItem">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.TreeViewItemHelper.GlyphSizeProperty">
            <summary>
            Identifies the GlyphSize attached property.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.TreeViewItemHelper.IndentationProperty">
            <summary>
            Identifies the Indentation dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Primitives.TreeViewItemHelper.GetIndentation(System.Windows.Controls.TreeViewItem)">
            <summary>
            Gets the amount that the item is indented.
            </summary>
            <param name="treeViewItem">The element from which to read the property value.</param>
            <returns>The amount that the item is indented.</returns>
        </member>
        <member name="T:ModernWpf.Controls.Primitives.ProgressBarTemplateSettings">
            <summary>
            Provides calculated values that can be referenced as **TemplatedParent** sources
            when defining templates for a ProgressBar control. Not intended for general use.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.Primitives.TitleBarControl.IsBackEnabledProperty">
            <summary>
            Identifies the IsBackEnabled attached property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.Primitives.TitleBarControl.IsBackEnabled">
            <summary>
            Gets or sets a value that indicates whether the back button is enabled or disabled.
            </summary>
            <returns>true if the back button is enabled; otherwise, false. The default is true.</returns>
        </member>
        <member name="T:ModernWpf.Controls.RatingItemFontInfo">
            <summary>
            Represents information about the visual states of font elements that represent
            a rating.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.RatingItemFontInfo.#ctor">
            <summary>
            Initializes a new instance of the RatingItemFontInfo class.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.RatingItemFontInfo.DisabledGlyphProperty">
            <summary>
            Identifies the DisabledGlyph dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.RatingItemFontInfo.DisabledGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            that is disabled.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="F:ModernWpf.Controls.RatingItemFontInfo.GlyphProperty">
            <summary>
            Identifies the Glyph dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.RatingItemFontInfo.Glyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            that has been set by the user.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="F:ModernWpf.Controls.RatingItemFontInfo.PlaceholderGlyphProperty">
            <summary>
            Identifies the PlaceholderGlyph dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.RatingItemFontInfo.PlaceholderGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            that is showing a placeholder value.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="F:ModernWpf.Controls.RatingItemFontInfo.PointerOverGlyphProperty">
            <summary>
            Identifies the PointerOverGlyph dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.RatingItemFontInfo.PointerOverGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            that has the pointer over it.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="F:ModernWpf.Controls.RatingItemFontInfo.PointerOverPlaceholderGlyphProperty">
            <summary>
            Identifies the PointerOverPlaceholderGlyph dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.RatingItemFontInfo.PointerOverPlaceholderGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            showing a placeholder value with the pointer over it.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="F:ModernWpf.Controls.RatingItemFontInfo.UnsetGlyphProperty">
            <summary>
            Identifies the UnsetGlyph dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.RatingItemFontInfo.UnsetGlyph">
            <summary>
            Gets or sets a Segoe MDL2 Assets font glyph that represents a rating element
            that has not been set.
            </summary>
            <returns>The hexadecimal character code for the rating element glyph.</returns>
        </member>
        <member name="T:ModernWpf.Controls.RatingItemInfo">
            <summary>
            Represents information about the visual states of the elements that represent
            a rating.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.RatingItemInfo.#ctor">
            <summary>
            Initializes a new instance of the RatingItemInfo class.
            </summary>
        </member>
        <member name="T:ModernWpf.Controls.SimpleStackPanel">
            <summary>
            Arranges child elements into a single line that can be oriented horizontally
            or vertically.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.SimpleStackPanel.#ctor">
            <summary>
            Initializes a new instance of the SimpleStackPanel class.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.SimpleStackPanel.Orientation">
            <summary>
            Gets or sets a value that indicates the dimension by which child elements are
            stacked.
            </summary>
            <returns>The Orientation of child content.</returns>
        </member>
        <member name="F:ModernWpf.Controls.SimpleStackPanel.OrientationProperty">
            <summary>
            Identifies the Orientation dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.SimpleStackPanel.Spacing">
            <summary>
            Gets or sets a uniform distance (in pixels) between stacked items. It is applied
            in the direction of the SimpleStackPanel's Orientation.
            </summary>
            <returns>The uniform distance (in pixels) between stacked items.</returns>
        </member>
        <member name="F:ModernWpf.Controls.SimpleStackPanel.SpacingProperty">
            <summary>
            Identifies the Spacing dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.SimpleStackPanel.HasLogicalOrientation">
            <summary>
            Gets a value that indicates if this SimpleStackPanel has vertical
            or horizontal orientation.
            </summary>
            <returns>This property always returns true.</returns>
        </member>
        <member name="P:ModernWpf.Controls.SimpleStackPanel.LogicalOrientation">
            <summary>
            Gets a value that represents the Orientation of the SimpleStackPanel.
            </summary>
            <returns>An Orientation value.</returns>
        </member>
        <member name="M:ModernWpf.Controls.SimpleStackPanel.MeasureOverride(System.Windows.Size)">
            <summary>
            Measures the child elements of a SimpleStackPanel in anticipation
            of arranging them during the SimpleStackPanel.ArrangeOverride(System.Windows.Size)
            pass.
            </summary>
            <param name="constraint">An upper limit System.Windows.Size that should not be exceeded.</param>
            <returns>The System.Windows.Size that represents the desired size of the element.</returns>
        </member>
        <member name="M:ModernWpf.Controls.SimpleStackPanel.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a SimpleStackPanel element.
            </summary>
            <param name="arrangeSize">The System.Windows.Size that this element should use to arrange its child elements.</param>
            <returns>
            The System.Windows.Size that represents the arranged size of this SimpleStackPanel
            element and its child elements.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.VisualStates.StateNormal">
            <summary>
            Normal state
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.VisualStates.StateMouseOver">
            <summary>
            MouseOver state
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.VisualStates.StatePressed">
            <summary>
            Pressed state
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.VisualStates.StateDisabled">
            <summary>
            Disabled state
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.VisualStates.StateReadOnly">
            <summary>
            Readonly state
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.VisualStates.GroupCommon">
            <summary>
            Common state group
            </summary>
        </member>
        <member name="T:ModernWpf.Controls.XamlControlsResources">
            <summary>
            Default styles for controls.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.XamlControlsResources.#ctor">
            <summary>
            Initializes a new instance of the XamlControlsResources class.
            </summary>
        </member>
        <member name="T:ModernWpf.Controls.BitmapIcon">
            <summary>
            Represents an icon that uses a bitmap as its content.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.BitmapIcon.#ctor">
            <summary>
            Initializes a new instance of the BitmapIcon class.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.BitmapIcon.UriSourceProperty">
            <summary>
            Identifies the UriSource dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.BitmapIcon.UriSource">
            <summary>
            Gets or sets the Uniform Resource Identifier (URI) of the bitmap to use as the
            icon content.
            </summary>
            <returns>The Uri of the bitmap to use as the icon content. The default is **null**.</returns>
        </member>
        <member name="F:ModernWpf.Controls.BitmapIcon.ShowAsMonochromeProperty">
            <summary>
            Identifies the ShowAsMonochrome dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.BitmapIcon.ShowAsMonochrome">
            <summary>
            Gets or sets a value that indicates whether the bitmap is shown in a single color.
            </summary>
            <returns>
            **true** to show the bitmap in a single color; **false** to show the bitmap in
            full color. The default is **true.**
            </returns>
        </member>
        <member name="T:ModernWpf.Controls.FontIcon">
            <summary>
            Represents an icon that uses a glyph from the specified font.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.FontIcon.#ctor">
            <summary>
            Initializes a new instance of the FontIcon class.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.FontIcon.FontFamilyProperty">
            <summary>
            The identifier for the FontFamily dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.FontIcon.FontFamily">
            <summary>
            Gets or sets the font used to display the icon glyph.
            </summary>
            <returns>The font used to display the icon glyph.</returns>
        </member>
        <member name="F:ModernWpf.Controls.FontIcon.FontSizeProperty">
            <summary>
            The identifier for the FontSize dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.FontIcon.FontSize">
            <summary>
            Gets or sets the size of the icon glyph.
            </summary>
            <returns>A non-negative value that specifies the font size, measured in pixels.</returns>
        </member>
        <member name="F:ModernWpf.Controls.FontIcon.FontStyleProperty">
            <summary>
            The identifier for the FontStyle dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.FontIcon.FontStyle">
            <summary>
            Gets or sets the font style for the icon glyph.
            </summary>
            <returns>
            A named constant of the enumeration that specifies the style in which the icon
            glyph is rendered. The default is **Normal**.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.FontIcon.FontWeightProperty">
            <summary>
            The identifier for the FontWeight dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.FontIcon.FontWeight">
            <summary>
            Gets or sets the thickness of the icon glyph.
            </summary>
            <returns>
            A value that specifies the thickness of the icon glyph. The default is **Normal**.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.FontIcon.GlyphProperty">
            <summary>
            The identifier for the Glyph dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.FontIcon.Glyph">
            <summary>
            Gets or sets the character code that identifies the icon glyph.
            </summary>
            <returns>The hexadecimal character code for the icon glyph.</returns>
        </member>
        <member name="T:ModernWpf.Controls.IconElement">
            <summary>
            Represents the base class for an icon UI element.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.IconElement.ForegroundProperty">
            <summary>
            Identifies the Foreground dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.IconElement.Foreground">
            <summary>
            Gets or sets a brush that describes the foreground color.
            </summary>
            <returns>
            The brush that paints the foreground of the control.
            </returns>
        </member>
        <member name="T:ModernWpf.Controls.PathIcon">
            <summary>
            Represents an icon that uses a vector path as its content.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.PathIcon.#ctor">
            <summary>
            Initializes a new instance of the PathIcon class.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.PathIcon.DataProperty">
            <summary>
            Identifies the Data dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.PathIcon.Data">
            <summary>
            Gets or sets a Geometry that specifies the shape to be drawn. In XAML. this can
            also be set using a string that describes Move and draw commands syntax.
            </summary>
            <returns>A description of the shape to be drawn.</returns>
        </member>
        <member name="T:ModernWpf.Controls.Symbol">
            <summary>
            Defines constants that specify a glyph from the **Segoe MDL2 Assets** font to
            use as the content of a SymbolIcon.
            </summary>
        </member>
        <member name="T:ModernWpf.Controls.SymbolIcon">
            <summary>
            Represents an icon that uses a glyph from the Segoe MDL2 Assets font as its content.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.SymbolIcon.#ctor">
            <summary>
            Initializes a new instance of the SymbolIcon class.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.SymbolIcon.#ctor(ModernWpf.Controls.Symbol)">
            <summary>
            Initializes a new instance of the SymbolIcon class using the specified symbol.
            </summary>
            <param name="symbol">
            A named constant of the enumeration that specifies the Segoe MDL2 Assets glyph
            to use. The default is **null**.
            </param>
        </member>
        <member name="F:ModernWpf.Controls.SymbolIcon.SymbolProperty">
            <summary>
            Identifies the Symbol dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.SymbolIcon.Symbol">
            <summary>
            Gets or sets the Segoe MDL2 Assets glyph used as the icon content.
            </summary>
            <returns>
            A named constant of the numeration that specifies the Segoe MDL2 Assets glyph
            to use.
            </returns>
        </member>
        <member name="T:ModernWpf.Controls.BitmapIconSource">
            <summary>
            Represents an icon source that uses a bitmap as its content.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.BitmapIconSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModernWpf.Controls.BitmapIconSource"/> class.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.BitmapIconSource.UriSourceProperty">
            <summary>
            Identifies the <see cref="P:ModernWpf.Controls.BitmapIconSource.UriSource"/> dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.BitmapIconSource.UriSource">
            <summary>
            Gets or sets the Uniform Resource Identifier (URI) of the bitmap to use as the icon content.
            </summary>
            <returns>
            The <see cref="T:System.Uri"/> of the bitmap to use as the icon content. The default is <see langword="null"/>.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.BitmapIconSource.ShowAsMonochromeProperty">
            <summary>
            Identifies the <see cref="P:ModernWpf.Controls.BitmapIconSource.ShowAsMonochrome"/> dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.BitmapIconSource.ShowAsMonochrome">
            <summary>
            Gets or sets a value that indicates whether the bitmap is shown in a single color.
            </summary>
            <returns>
            <see langword="true"/> to show the bitmap in a single color;
            <see langword="false"/> to show the bitmap in full color. The default is <see langword="true"/>.
            </returns>
        </member>
        <member name="T:ModernWpf.Controls.FontIconSource">
            <summary>
            Represents an icon source that uses a glyph from the specified font.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.FontIconSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModernWpf.Controls.FontIconSource"/> class.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.FontIconSource.FontFamilyProperty">
            <summary>
            Identifies the <see cref="P:ModernWpf.Controls.FontIconSource.FontFamily"/> dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.FontIconSource.FontFamily">
            <summary>
            Gets or sets the font used to display the icon glyph.
            </summary>
            <returns>
            The font used to display the icon glyph.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.FontIconSource.FontSizeProperty">
            <summary>
            Identifies the <see cref="P:ModernWpf.Controls.FontIconSource.FontSize"/> dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.FontIconSource.FontSize">
            <summary>
            Gets or sets the size of the icon glyph.
            </summary>
            <returns>
            A non-negative value that specifies the font size, measured in pixels.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.FontIconSource.FontStyleProperty">
            <summary>
            Identifies the <see cref="P:ModernWpf.Controls.FontIconSource.FontStyle"/> dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.FontIconSource.FontStyle">
            <summary>
            Gets or sets the font style for the icon glyph.
            </summary>
            <returns>
            A named constant of the enumeration that specifies the style in which the icon glyph is rendered.
            The default is <see cref="P:System.Windows.FontStyles.Normal"/>.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.FontIconSource.FontWeightProperty">
            <summary>
            Identifies the <see cref="P:ModernWpf.Controls.FontIconSource.FontWeight"/> dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.FontIconSource.FontWeight">
            <summary>
            Gets or sets the thickness of the icon glyph.
            </summary>
            <returns>
            A value that specifies the thickness of the icon glyph.
            The default is <see cref="P:System.Windows.FontWeights.Normal"/>.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.FontIconSource.GlyphProperty">
            <summary>
            Identifies the <see cref="P:ModernWpf.Controls.FontIconSource.Glyph"/> dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.FontIconSource.Glyph">
            <summary>
            Gets or sets the character code that identifies the icon glyph.
            </summary>
            <returns>
            The hexadecimal character code for the icon glyph.
            </returns>
        </member>
        <member name="T:ModernWpf.Controls.IconSource">
            <summary>
            Represents the base class for an icon source.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.IconSource.ForegroundProperty">
            <summary>
            Identifies the <see cref="P:ModernWpf.Controls.IconSource.Foreground"/> dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.IconSource.Foreground">
            <summary>
            Gets or sets a brush that describes the foreground color.
            </summary>
            <returns>
            The brush that paints the foreground of the control. The default is <see langword="null"/>, (a null brush) which is
            evaluated as Transparent for rendering.
            </returns>
        </member>
        <member name="T:ModernWpf.Controls.PathIconSource">
            <summary>
            Represents an icon source that uses a vector path as its content.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.PathIconSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModernWpf.Controls.PathIconSource"/> class.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.PathIconSource.DataProperty">
            <summary>
            Identifies the <see cref="P:ModernWpf.Controls.PathIconSource.Data"/> dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.PathIconSource.Data">
            <summary>
            Gets or sets a <see cref="T:System.Windows.Media.Geometry"/>.
            </summary>
            <returns>
            A description of the shape to be drawn.
            </returns>
        </member>
        <member name="T:ModernWpf.Controls.SymbolIconSource">
            <summary>
            Represents an icon source that uses a glyph from the Segoe MDL2 Assets font as its content.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.SymbolIconSource.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ModernWpf.Controls.SymbolIconSource"/> class.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.SymbolIconSource.SymbolProperty">
            <summary>
            Identifies the <see cref="P:ModernWpf.Controls.SymbolIconSource.Symbol"/> dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.SymbolIconSource.Symbol">
            <summary>
            Gets or sets the Segoe MDL2 Assets glyph used as the icon content.
            </summary>
            <returns>
            A named constant of the enumeration that specifies the Segoe MDL2 Assets glyph to use.
            </returns>
        </member>
        <member name="T:ModernWpf.Controls.Frame">
            <summary>
            Displays Page instances, supports navigation to new pages, and maintains a navigation
            history to support forward and backward navigation.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Frame.#ctor">
            <summary>
            Initialzies a new instance of the Frame class.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.Frame.SourcePageTypeProperty">
            <summary>
            Identifies the SourcePageType dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.Frame.SourcePageType">
            <summary>
            Gets or sets a type reference of the current content, or the content that should
            be navigated to.
            </summary>
            <returns>
            A type reference for the current content, or the content to navigate to.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.Frame.CurrentSourcePageTypeProperty">
            <summary>
            Identifies the CurrentSourcePageType dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.Frame.CurrentSourcePageType">
            <summary>
            Gets a type reference for the content that is currently displayed.
            </summary>
            <returns>
            A type reference for the content that is currently displayed.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.Frame.BackStackDepthProperty">
            <summary>
            Identifies the BackStackDepth dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.Frame.BackStackDepth">
            <summary>
            Gets the number of entries in the navigation back stack.
            </summary>
            <returns>The number of entries in the navigation back stack.</returns>
        </member>
        <member name="F:ModernWpf.Controls.Frame.ContentTransitionsProperty">
            <summary>
            Identifies the ContentTransitions dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.Frame.ContentTransitions">
            <summary>
            Gets or sets the collection of Transition style elements that apply to the content
            of a ContentControl.
            </summary>
            <returns>The strongly typed collection of Transition style elements.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Frame.Navigate(System.Type)">
            <summary>
            Causes the Frame to load content represented by the specified Page.
            </summary>
            <param name="sourcePageType">The page to navigate to, specified as a type reference to its partial class type.</param>
            <returns>true if navigation is not canceled; otherwise, false.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Frame.Navigate(System.Type,System.Object)">
            <summary>
            Causes the Frame to load content represented by the specified Page, also passing
            a parameter to be interpreted by the target of the navigation.
            </summary>
            <param name="sourcePageType">The page to navigate to, specified as a type reference to its partial class type.</param>
            <param name="parameter">The navigation parameter to pass to the target page.</param>
            <returns>true if navigation is not canceled; otherwise, false.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Frame.Navigate(System.Type,System.Object,ModernWpf.Media.Animation.NavigationTransitionInfo)">
            <summary>
            Causes the Frame to load content represented by the specified Page -derived data
            type, also passing a parameter to be interpreted by the target of the navigation,
            and a value indicating the animated transition to use.
            </summary>
            <param name="sourcePageType">The page to navigate to, specified as a type reference to its partial class type.</param>
            <param name="parameter">The navigation parameter to pass to the target page.</param>
            <param name="infoOverride">Info about the animated transition.</param>
            <returns>true if navigation is not canceled; otherwise, false.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Frame.Navigate(System.Uri,System.Object,ModernWpf.Media.Animation.NavigationTransitionInfo)">
            <summary>
            Navigates asynchronously to source content located at a uniform resource identifier
            (URI), and passes an object that contains data to be used for processing during
            navigation, and a value indicating the animated transition to use.
            </summary>
            <param name="source">A System.Uri object initialized with the URI for the desired content.</param>
            <param name="extraData">A System.Object that contains data to be used for processing during navigation.</param>
            <param name="infoOverride">Info about the animated transition.</param>
            <returns>true if navigation is not canceled; otherwise, false.</returns>
        </member>
        <member name="M:ModernWpf.Controls.Frame.GoBack(ModernWpf.Media.Animation.NavigationTransitionInfo)">
            <summary>
            Navigates to the most recent item in back navigation history, if a Frame manages
            its own navigation history, and specifies the animated transition to use.
            </summary>
            <param name="transitionInfoOverride">Info about the animated transition to use.</param>
        </member>
        <member name="T:ModernWpf.Controls.Page">
            <summary>
            Represents content that a Frame control can navigate to.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.Page.#ctor">
            <summary>
            Initializes a new instance of the Page class.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.Page.FrameProperty">
            <summary>
            Identifies the Frame dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.Page.Frame">
            <summary>
            Gets the controlling Frame for the Page content.
            </summary>
            <returns>
            The controlling Frame for the Page content.
            </returns>
        </member>
        <member name="M:ModernWpf.Controls.Page.OnNavigatedTo(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Invoked when the Page is loaded and becomes the current source of a parent Frame.
            </summary>
            <param name="e">
            Event data that can be examined by overriding code. The event data is representative
            of the pending navigation that will load the current Page. Usually the most relevant
            property to examine is Parameter.
            </param>
        </member>
        <member name="M:ModernWpf.Controls.Page.OnNavigatingFrom(System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Invoked immediately before the Page is unloaded and is no longer the current
            source of a parent Frame.
            </summary>
            <param name="e">
            Event data that can be examined by overriding code. The event data is representative
            of the navigation that will unload the current Page unless canceled. The navigation
            can potentially be canceled by setting Cancel.
            </param>
        </member>
        <member name="M:ModernWpf.Controls.Page.OnNavigatedFrom(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Invoked immediately after the Page is unloaded and is no longer the current source
            of a parent Frame.
            </summary>
            <param name="e">
            Event data that can be examined by overriding code. The event data is representative
            of the navigation that has unloaded the current Page.
            </param>
        </member>
        <member name="T:ModernWpf.Controls.ProgressBar">
            <summary>
            Represents a control that indicates the progress of an operation, where the typical
            visual appearance is a bar that animates a filled area as progress continues.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.ProgressBar.#ctor">
            <summary>
            Initializes a new instance of the ProgressBar class.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.ProgressBar.IsIndeterminateProperty">
            <summary>
            Identifies the IsIndeterminate dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ProgressBar.IsIndeterminate">
            <summary>
            Gets or sets a value that indicates whether the progress bar reports generic
            progress with a repeating pattern or reports progress based on the Value property.
            </summary>
            <returns>
            **True** if the progress bar reports generic progress with a repeating pattern;
            **false** if the progress bar reports progress based on the Value property. The
            default is **false**.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.ProgressBar.ShowErrorProperty">
            <summary>
            Identifies the ShowError dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ProgressBar.ShowError">
            <summary>
            Gets or sets a value that indicates whether the progress bar should use visual
            states that communicate an **Error** state to the user.
            </summary>
            <returns>
            **True** if the progress bar should use visual states that communicate an **Error**
            state to the user; otherwise, **false**. The default is **false**.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.ProgressBar.ShowPausedProperty">
            <summary>
            Identifies the ShowPaused dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ProgressBar.ShowPaused">
            <summary>
            Gets or sets a value that indicates whether the progress bar should use visual
            states that communicate a **Paused** state to the user.
            </summary>
            <returns>
            **True** if the progress bar should use visual states that communicate a **Paused**
            state to the user; otherwise, **false**. The default is **false**.
            </returns>
        </member>
        <member name="F:ModernWpf.Controls.ProgressBar.TemplateSettingsProperty">
            <summary>
            Identifies the TemplateSettings dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ProgressBar.TemplateSettings">
            <summary>
            Gets an object that provides calculated values that can be referenced as **TemplateBinding**
            sources when defining templates for a ProgressBar control.
            </summary>
            <returns>An object that provides calculated values for templates.</returns>
        </member>
        <member name="F:ModernWpf.Controls.ProgressBar.CornerRadiusProperty">
            <summary>
            Identifies the CornerRadius dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Controls.ProgressBar.CornerRadius">
            <summary>
            Gets or sets the radius for the corners of the control's border.
            </summary>
            <returns>
            The degree to which the corners are rounded, expressed as values of the CornerRadius
            structure.
            </returns>
        </member>
        <member name="T:ModernWpf.Controls.TextContextMenu">
            <summary>
            Represents a specialized context menu that contains commands for editing text.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.TextContextMenu.#ctor">
            <summary>
            Initializes a new instance of the TextContextMenu class.
            </summary>
        </member>
        <member name="T:ModernWpf.Controls.BackRequestedEventArgs">
            <summary>
            Provides event data for the BackRequested event.
            </summary>
        </member>
        <member name="F:ModernWpf.Controls.TitleBar.IsBackEnabledProperty">
            <summary>
            Identifies the IsBackEnabled attached property.
            </summary>
        </member>
        <member name="M:ModernWpf.Controls.TitleBar.GetIsBackEnabled(System.Windows.Window)">
            <summary>
            Gets a value that indicates whether the back button is enabled or disabled.
            </summary>
            <param name="window">The element from which to read the property value.</param>
            <returns>true if the back button is enabled; otherwise, false. The default is true.</returns>
        </member>
        <member name="M:ModernWpf.Controls.TitleBar.SetIsBackEnabled(System.Windows.Window,System.Boolean)">
            <summary>
            Sets a value that indicates whether the back button is enabled or disabled.
            </summary>
            <param name="window">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.Controls.TitleBar.BackRequestedEvent">
            <summary>
            Identifies the BackRequested routed event.
            </summary>
        </member>
        <member name="T:ModernWpf.DesignMode">
            <summary>
            Enables you to detect whether your app is in design mode in a visual designer.
            </summary>
        </member>
        <member name="P:ModernWpf.DesignMode.DesignModeEnabled">
            <summary>
            Gets a value that indicates whether the process is running in design mode.
            </summary>
            <returns>**True** if the process is running in design mode; otherwise **false**.</returns>
        </member>
        <member name="T:ModernWpf.VisualTree">
            <summary>
            Defines a collection of extensions methods for UI.
            </summary>
        </member>
        <member name="M:ModernWpf.VisualTree.FindDescendantByName(System.Windows.DependencyObject,System.String)">
            <summary>
            Find descendant <see cref="T:System.Windows.FrameworkElement"/> control using its name.
            </summary>
            <param name="element">Parent element.</param>
            <param name="name">Name of the control to find</param>
            <returns>Descendant control or null if not found.</returns>
        </member>
        <member name="M:ModernWpf.VisualTree.FindDescendant``1(System.Windows.DependencyObject)">
            <summary>
            Find first descendant control of a specified type.
            </summary>
            <typeparam name="T">Type to search for.</typeparam>
            <param name="element">Parent element.</param>
            <returns>Descendant control or null if not found.</returns>
        </member>
        <member name="M:ModernWpf.VisualTree.FindDescendant(System.Windows.DependencyObject,System.Type)">
            <summary>
            Find first descendant control of a specified type.
            </summary>
            <param name="element">Parent element.</param>
            <param name="type">Type of descendant.</param>
            <returns>Descendant control or null if not found.</returns>
        </member>
        <member name="M:ModernWpf.VisualTree.FindDescendants``1(System.Windows.DependencyObject)">
            <summary>
            Find all descendant controls of the specified type.
            </summary>
            <typeparam name="T">Type to search for.</typeparam>
            <param name="element">Parent element.</param>
            <returns>Descendant controls or empty if not found.</returns>
        </member>
        <member name="M:ModernWpf.VisualTree.FindAscendantByName(System.Windows.DependencyObject,System.String)">
            <summary>
            Find visual ascendant <see cref="T:System.Windows.FrameworkElement"/> control using its name.
            </summary>
            <param name="element">Parent element.</param>
            <param name="name">Name of the control to find</param>
            <returns>Descendant control or null if not found.</returns>
        </member>
        <member name="M:ModernWpf.VisualTree.FindAscendant``1(System.Windows.DependencyObject)">
            <summary>
            Find first visual ascendant control of a specified type.
            </summary>
            <typeparam name="T">Type to search for.</typeparam>
            <param name="element">Child element.</param>
            <returns>Ascendant control or null if not found.</returns>
        </member>
        <member name="M:ModernWpf.VisualTree.FindAscendant(System.Windows.DependencyObject,System.Type)">
            <summary>
            Find first visual ascendant control of a specified type.
            </summary>
            <param name="element">Child element.</param>
            <param name="type">Type of ascendant to look for.</param>
            <returns>Ascendant control or null if not found.</returns>
        </member>
        <member name="M:ModernWpf.VisualTree.FindAscendants(System.Windows.DependencyObject)">
            <summary>
            Find all visual ascendants for the element.
            </summary>
            <param name="element">Child element.</param>
            <returns>A collection of parent elements or null if none found.</returns>
        </member>
        <member name="M:ModernWpf.Media.Animation.CubicBezierEase.GetSplineProgress(System.Double)">
            <summary>
            Calculates spline progress from a linear progress.
            </summary>
            <param name="linearProgress">the linear progress</param>
            <returns>the spline progress</returns>
        </member>
        <member name="M:ModernWpf.Media.Animation.CubicBezierEase.Build">
            <summary>
            Compute cached coefficients.
            </summary>
        </member>
        <member name="M:ModernWpf.Media.Animation.CubicBezierEase.GetBezierValue(System.Double,System.Double,System.Double)">
            <summary>
            Get an X or Y value with the Bezier formula.
            </summary>
            <param name="b">the second Bezier coefficient</param>
            <param name="c">the third Bezier coefficient</param>
            <param name="t">the parameter value to evaluate at</param>
            <returns>the value of the Bezier function at the given parameter</returns>
        </member>
        <member name="M:ModernWpf.Media.Animation.CubicBezierEase.GetXAndDx(System.Double,System.Double@,System.Double@)">
            <summary>
            Get X and dX/dt at a given parameter
            </summary>
            <param name="t">the parameter value to evaluate at</param>
            <param name="x">the value of x there</param>
            <param name="dx">the value of dx/dt there</param>
        </member>
        <member name="M:ModernWpf.Media.Animation.CubicBezierEase.SetParameterFromX(System.Double)">
            <summary>
            Compute the parameter value that corresponds to a given X value, using a modified
            clamped Newton-Raphson algorithm to solve the equation X(t) - time = 0. We make 
            use of some known properties of this particular function:
            * We are only interested in solutions in the interval [0,1]
            * X(t) is increasing, so we can assume that if X(t) > time t > solution.  We use
              that to clamp down the search interval with every probe.
            * The derivative of X and Y are between 0 and 3.
            </summary>
            <param name="time">the time, scaled to fit in [0,1]</param>
        </member>
        <member name="T:ModernWpf.Media.Animation.DrillInNavigationTransitionInfo">
            <summary>
            Specifies the animation to run when a user navigates forward in a logical hierarchy,
            like from a master list to a detail page.
            </summary>
        </member>
        <member name="M:ModernWpf.Media.Animation.DrillInNavigationTransitionInfo.#ctor">
            <summary>
            Initializes a new instance of the DrillInNavigationTransitionInfo class.
            </summary>
        </member>
        <member name="T:ModernWpf.Media.Animation.EntranceNavigationTransitionInfo">
            <summary>
            Specifies the animation to run when content appears on a Page.
            </summary>
        </member>
        <member name="M:ModernWpf.Media.Animation.EntranceNavigationTransitionInfo.#ctor">
            <summary>
            Initializes a new instance of the EntranceNavigationTransitionInfo class.
            </summary>
        </member>
        <member name="T:ModernWpf.Media.Animation.FadeInThemeAnimation">
            <summary>
            Represents the preconfigured opacity animation that applies to controls when
            they are first shown.
            </summary>
        </member>
        <member name="M:ModernWpf.Media.Animation.FadeInThemeAnimation.#ctor">
            <summary>
            Initializes a new instance of the FadeInThemeAnimation class.
            </summary>
        </member>
        <member name="F:ModernWpf.Media.Animation.FadeInThemeAnimation.TargetNameProperty">
            <summary>
            Identifies the TargetName dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Media.Animation.FadeInThemeAnimation.TargetName">
            <summary>
            Gets or sets the reference name of the control element being targeted.
            </summary>
            <returns>
            The reference name. This is typically the **x:Name** of the relevant element
            as declared in XAML.
            </returns>
        </member>
        <member name="T:ModernWpf.Media.Animation.FadeOutThemeAnimation">
            <summary>
            Represents the preconfigured opacity animation that applies to controls when
            they are removed from the UI or hidden.
            </summary>
        </member>
        <member name="M:ModernWpf.Media.Animation.FadeOutThemeAnimation.#ctor">
            <summary>
            Initializes a new instance of the FadeOutThemeAnimation class.
            </summary>
        </member>
        <member name="F:ModernWpf.Media.Animation.FadeOutThemeAnimation.TargetNameProperty">
            <summary>
            Identifies the TargetName dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Media.Animation.FadeOutThemeAnimation.TargetName">
            <summary>
            Gets or sets the reference name of the control element being targeted.
            </summary>
            <returns>
            The reference name. This is typically the **x:Name** of the relevant element
            as declared in XAML.
            </returns>
        </member>
        <member name="T:ModernWpf.Media.Animation.NavigationThemeTransition">
            <summary>
            Provides page navigation animations.
            </summary>
        </member>
        <member name="M:ModernWpf.Media.Animation.NavigationThemeTransition.#ctor">
            <summary>
            Initializes a new instance of the NavigationThemeTransition class.
            </summary>
        </member>
        <member name="F:ModernWpf.Media.Animation.NavigationThemeTransition.DefaultNavigationTransitionInfoProperty">
            <summary>
            Identifies the DefaultNavigationTransitionInfo dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Media.Animation.NavigationThemeTransition.DefaultNavigationTransitionInfo">
            <summary>
            Gets or sets the default transition used when navigating between pages.
            </summary>
            <returns>
            The default transition used when navigating between pages.
            </returns>
        </member>
        <member name="T:ModernWpf.Media.Animation.NavigationTransitionInfo">
            <summary>
            Provides parameter info for the Frame.Navigate method. Controls how the transition
            animation runs during the navigation action.
            </summary>
        </member>
        <member name="M:ModernWpf.Media.Animation.NavigationTransitionInfo.#ctor">
            <summary>
            Initializes a new instance of the NavigationTransitionInfo class.
            </summary>
        </member>
        <member name="T:ModernWpf.Media.Animation.SlideNavigationTransitionEffect">
            <summary>
            Defines constants that describe the type of animation to play during a slide
            transition.
            </summary>
        </member>
        <member name="F:ModernWpf.Media.Animation.SlideNavigationTransitionEffect.FromBottom">
            <summary>
            The exiting page fades out and the entering page enters from the bottom.
            </summary>
        </member>
        <member name="F:ModernWpf.Media.Animation.SlideNavigationTransitionEffect.FromLeft">
            <summary>
            The exiting page leaves to the right of the panel and the entering page enters
            from the left.
            </summary>
        </member>
        <member name="F:ModernWpf.Media.Animation.SlideNavigationTransitionEffect.FromRight">
            <summary>
            The exiting page leaves to the left of the panel and the entering page enters
            from the right.
            </summary>
        </member>
        <member name="T:ModernWpf.Media.Animation.SlideNavigationTransitionInfo">
            <summary>
            Provides the parameters for a slide navigation transition.
            </summary>
        </member>
        <member name="M:ModernWpf.Media.Animation.SlideNavigationTransitionInfo.#ctor">
            <summary>
            Initializes a new instance of the **SlideNavigationTransitionInfo** class.
            </summary>
        </member>
        <member name="F:ModernWpf.Media.Animation.SlideNavigationTransitionInfo.EffectProperty">
            <summary>
            Identifies the Effect dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.Media.Animation.SlideNavigationTransitionInfo.Effect">
            <summary>
            Gets or sets the type of animation effect to play during the slide transition.
            </summary>
            <returns>
            The type of animation effect to play during the slide transition.
            </returns>
        </member>
        <member name="T:ModernWpf.Media.Animation.SuppressNavigationTransitionInfo">
            <summary>
            Specifies that animations are suppressed during navigation.
            </summary>
        </member>
        <member name="M:ModernWpf.Media.Animation.SuppressNavigationTransitionInfo.#ctor">
            <summary>
            Initializes a new instance of the SuppressNavigationTransitionInfo class.
            </summary>
        </member>
        <member name="T:ModernWpf.Media.Animation.Transition">
            <summary>
            Represents a visual behavior that occurs for predefined actions or state changes.
            Specific theme transitions (various Transition derived classes) can be applied
            to individual elements using the UIElement.Transitions property, or applied for
            scenario-specific theme transition properties such as ContentControl.ContentTransitions.
            </summary>
        </member>
        <member name="T:ModernWpf.Media.Animation.TransitionCollection">
            <summary>
            Represents a collection of Transition objects. Each Transition object represents
            a different theme transition, part of the Windows Runtime animation library.
            </summary>
        </member>
        <member name="M:ModernWpf.Media.Animation.TransitionCollection.#ctor">
            <summary>
            Initializes a new instance of the TransitionCollection class.
            </summary>
        </member>
        <member name="M:ModernWpf.Navigation.Extensions.SourcePageType(System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Gets the data type of the source page.
            </summary>
            <returns>
            The data type of the source page, represented as *namespace*.*type* or simply
            *type*.
            </returns>
        </member>
        <member name="M:ModernWpf.Navigation.Extensions.SourcePageType(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Gets the data type of the source page.
            </summary>
            <returns>
            The data type of the source page, represented as *namespace*.*type* or simply
            *type*.
            </returns>
        </member>
        <member name="M:ModernWpf.Navigation.Extensions.Parameter(System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Gets any "Parameter" object passed to the target page for the navigation.
            </summary>
            <returns>
            An object that potentially passes parameters to the navigation target. May be
            null.
            </returns>
        </member>
        <member name="M:ModernWpf.Navigation.Extensions.Parameter(System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Gets any "Parameter" object passed to the target page for the navigation.
            </summary>
            <returns>
            An object that potentially passes parameters to the navigation target. May be
            null.
            </returns>
        </member>
        <member name="T:ModernWpf.Automation.Peers.ProgressBarAutomationPeer">
            <summary>
            Exposes ProgressBar types to Microsoft UI Automation.
            </summary>
        </member>
        <member name="M:ModernWpf.Automation.Peers.ProgressBarAutomationPeer.#ctor(ModernWpf.Controls.ProgressBar)">
            <summary>
            Initializes a new instance of the ProgressBarAutomationPeer class.
            </summary>
            <param name="owner">The ProgressBar to create a peer for.</param>
        </member>
        <member name="P:ModernWpf.ResourceDictionaryEx.ThemeDictionaries">
            <summary>
            Gets a collection of merged resource dictionaries that are specifically keyed
            and composed to address theme scenarios, for example supplying theme values for
            "HighContrast".
            </summary>
            <returns>
            A dictionary of ResourceDictionary theme dictionaries. Each must be keyed with
            **x:Key**.
            </returns>
        </member>
        <member name="T:ModernWpf.Strings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ModernWpf.Strings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ModernWpf.Strings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ModernWpf.Strings.AppBarMoreButtonClosedToolTip">
            <summary>
              Looks up a localized string similar to See more.
            </summary>
        </member>
        <member name="P:ModernWpf.Strings.AppBarMoreButtonName">
            <summary>
              Looks up a localized string similar to More app bar.
            </summary>
        </member>
        <member name="P:ModernWpf.Strings.AppBarMoreButtonOpenToolTip">
            <summary>
              Looks up a localized string similar to See less.
            </summary>
        </member>
        <member name="P:ModernWpf.Strings.IgnoreMenuItemLabel">
            <summary>
              Looks up a localized string similar to Ignore.
            </summary>
        </member>
        <member name="P:ModernWpf.Strings.ToggleSwitchOff">
            <summary>
              Looks up a localized string similar to Off.
            </summary>
        </member>
        <member name="P:ModernWpf.Strings.ToggleSwitchOn">
            <summary>
              Looks up a localized string similar to On.
            </summary>
        </member>
        <member name="F:ModernWpf.ThemeManager.ApplicationThemeProperty">
            <summary>
            Identifies the ApplicationTheme dependency property.
            </summary>
        </member>
        <member name="P:ModernWpf.ThemeManager.ApplicationTheme">
            <summary>
            Gets or sets a value that determines the light-dark preference for the overall
            theme of an app.
            </summary>
            <returns>
            A value of the enumeration. The initial value is the default theme set by the
            user in Windows settings.
            </returns>
        </member>
        <member name="M:ModernWpf.ThemeManager.GetRequestedTheme(System.Windows.FrameworkElement)">
            <summary>
            Gets the UI theme that is used by the UIElement (and its child elements)
            for resource determination. The UI theme you specify with RequestedTheme can
            override the app-level RequestedTheme.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>A value of the enumeration, for example **Light**.</returns>
        </member>
        <member name="M:ModernWpf.ThemeManager.SetRequestedTheme(System.Windows.FrameworkElement,ModernWpf.ElementTheme)">
            <summary>
            Sets the UI theme that is used by the UIElement (and its child elements)
            for resource determination. The UI theme you specify with RequestedTheme can
            override the app-level RequestedTheme.
            </summary>
            <param name="element">The element on which to set the attached property.</param>
            <param name="value">The property value to set.</param>
        </member>
        <member name="F:ModernWpf.ThemeManager.RequestedThemeProperty">
            <summary>
            Identifies the RequestedTheme dependency property.
            </summary>
        </member>
        <member name="M:ModernWpf.ThemeManager.GetActualTheme(System.Windows.FrameworkElement)">
            <summary>
            Gets the UI theme that is currently used by the element, which might be different
            than the RequestedTheme.
            </summary>
            <param name="element">The element from which to read the property value.</param>
            <returns>A value of the enumeration, for example **Light**.</returns>
        </member>
        <member name="F:ModernWpf.ThemeManager.ActualThemeProperty">
            <summary>
            Identifies the ActualTheme dependency property.
            </summary>
        </member>
        <member name="T:ModernWpf.ApplicationTheme">
            <summary>
            Declares the theme preference for an app.
            </summary>
        </member>
        <member name="F:ModernWpf.ApplicationTheme.Light">
            <summary>
            Use the **Light** default theme.
            </summary>
        </member>
        <member name="F:ModernWpf.ApplicationTheme.Dark">
            <summary>
            Use the **Dark** default theme.
            </summary>
        </member>
        <member name="T:ModernWpf.ElementTheme">
            <summary>
            Specifies a UI theme that should be used for individual UIElement parts of an app UI.
            </summary>
        </member>
        <member name="F:ModernWpf.ElementTheme.Default">
            <summary>
            Use the Application.RequestedTheme value for the element. This is the default.
            </summary>
        </member>
        <member name="F:ModernWpf.ElementTheme.Light">
            <summary>
            Use the **Light** default theme.
            </summary>
        </member>
        <member name="F:ModernWpf.ElementTheme.Dark">
            <summary>
            Use the **Dark** default theme.
            </summary>
        </member>
        <member name="P:ModernWpf.ThemeResources.RequestedTheme">
            <summary>
            Gets or sets a value that determines the light-dark preference for the overall
            theme of an app.
            </summary>
            <returns>
            A value of the enumeration. The initial value is the default theme set by the
            user in Windows settings.
            </returns>
        </member>
        <member name="P:ModernWpf.ThemeResources.AccentColor">
            <summary>
            Gets or sets the accent color of the app.
            </summary>
        </member>
        <member name="T:ModernWpf.SimpleVisualStateManager">
            <summary>
                Manages visual states and their transitions on a control.
            </summary>
        </member>
        <member name="M:ModernWpf.SimpleVisualStateManager.GoToStateCore(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.String,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Boolean)">
            <summary>
                Allows subclasses to override the GoToState logic.
            </summary>
        </member>
        <member name="M:ModernWpf.SimpleVisualStateManager.ShouldRunStateStoryboard(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Windows.VisualState,System.Windows.VisualStateGroup)">
            <summary>
              If the stateGroupsRoot or control is removed from the tree, then the new
              storyboards will not be able to resolve target names. Thus,
              if the stateGroupsRoot or control is not in the tree, don't start the new
              storyboards. Also if the group has already changed state, then
              don't start the new storyboards.
            </summary> 
        </member>
        <member name="M:ModernWpf.SimpleVisualStateManager.GetTransition(System.Windows.FrameworkElement,System.Windows.VisualStateGroup,System.Windows.VisualState,System.Windows.VisualState)">
            <summary>
            Get the most appropriate transition between two states.
            </summary>
            <param name="element">Element being transitioned.</param>
            <param name="group">Group being transitioned.</param>
            <param name="from">VisualState being transitioned from.</param>
            <param name="to">VisualState being transitioned to.</param>
            <returns>
            The most appropriate transition between the desired states.
            </returns>
        </member>
        <member name="M:Standard.DpiHelper.LogicalPixelsToDevice(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Convert a point in device independent pixels (1/96") to a point in the system coordinates.
            </summary>
            <param name="logicalPoint">A point in the logical coordinate system.</param>
            <returns>Returns the parameter converted to the system's coordinates.</returns>
        </member>
        <member name="M:Standard.DpiHelper.DevicePixelsToLogical(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Convert a point in system coordinates to a point in device independent pixels (1/96").
            </summary>
            <param name="devicePoint">A point in the physical coordinate system.</param>
            <returns>Returns the parameter converted to the device independent coordinate system.</returns>
        </member>
        <member name="T:Standard.SM">
            <summary>
            SystemMetrics.  SM_*
            </summary>
        </member>
        <member name="T:Standard.SWP">
            <summary>
            SetWindowPos options
            </summary>
        </member>
        <member name="T:Standard.SW">
            <summary>
            ShowWindow options
            </summary>
        </member>
        <member name="T:WinRT.WindowsRuntimeTypeAttribute">
            <summary>
            When applied to a type, designates to WinRT.Runtime that this type represents a type defined in WinRT metadata.
            </summary>
        </member>
        <member name="M:WinRT.CastExtensions.As``1(System.Object)">
            <summary>
            Cast a WinRT object to an interface type it implements in its implementation
            even if it doesn't implement it in metadata.
            </summary>
            <typeparam name="TInterface">The interface type to cast to.</typeparam>
            <param name="value">The object.</param>
            <returns>
            If <typeparamref name="TInterface"/> is <see cref="T:System.Object"/>, returns the "default" wrapper for this WinRT object that implements all of the types that this object implements in metadata.
            If <paramref name="value"/> implements <typeparamref name="TInterface"/> in metadata, casts <paramref name="value"/> to <typeparamref name="TInterface"/>.
            Otherwise, creates a new wrapper of the underlying WinRT object that implements <typeparamref name="TInterface"/>.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the runtime type of <paramref name="value"/> is not a projected type (if the object is a managed object).</exception>
        </member>
        <member name="M:WinRT.CastExtensions.AsAgile``1(``0)">
            <summary>
            Create an agile reference for a given WinRT object.  The agile reference can be passed to another apartment
            within the process from which the original object can be retrieved even if it wasn't agile.
            </summary>
            <typeparam name="T">Type of WinRT object.</typeparam>
            <param name="value">The object.</param>
            <returns>
            If <paramref name="value"/> is a WinRT object, returns a AgileReference for it.
            Otherwise, returns null.
            </returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the runtime type of <paramref name="value"/> is not a projected type.</exception>
        </member>
        <member name="M:WinRT.ComWrappersSupport.InitializeComWrappers(System.Runtime.InteropServices.ComWrappers)">
            <summary>
            Initialize the global <see cref="T:System.Runtime.InteropServices.ComWrappers"/> instance to use for WinRT.
            </summary>
            <param name="wrappers">The wrappers instance to use, or the default if null.</param>
            <remarks>
            A custom ComWrappers instance can be supplied to enable programs to fast-track some type resolution
            instead of using reflection when the full type closure is known.
            </remarks>
        </member>
        <member name="T:WinRT.DerivedComposed">
            <summary>
            Marker type for a composable object to identify when it is being constructed
            as a base class of another composable object.
            </summary>
        </member>
        <member name="F:WinRT.TypeNameGenerationFlags.GenerateBoxedName">
            <summary>
            Generate the name of the type as if it was boxed in an object.
            </summary>
        </member>
        <member name="F:WinRT.TypeNameGenerationFlags.NoCustomTypeName">
            <summary>
            Don't output a type name of a custom .NET type. Generate a compatible WinRT type name if needed.
            </summary>
        </member>
        <member name="M:WinRT.TypeNameSupport.FindTypeByNameCached(System.String)">
            <summary>
            Parses and loads the given type name, if not found in the cache.
            </summary>
            <param name="runtimeClassName">The runtime class name to attempt to parse.</param>
            <returns>The type, if found.  Null otherwise</returns>
        </member>
        <member name="M:WinRT.TypeNameSupport.FindTypeByName(System.ReadOnlySpan{System.Char})">
            <summary>
            Parse the first full type name within the provided span.
            </summary>
            <param name="runtimeClassName">The runtime class name to attempt to parse.</param>
            <returns>A tuple containing the resolved type and the index of the end of the resolved type name.</returns>
        </member>
        <member name="M:WinRT.TypeNameSupport.FindTypeByNameCore(System.String,System.Type[])">
            <summary>
            Resolve a type from the given simple type name and the provided generic parameters.
            </summary>
            <param name="runtimeClassName">The simple type name.</param>
            <param name="genericTypes">The generic parameters.</param>
            <returns>The resolved (and instantiated if generic) type.</returns>
            <remarks>
            We look up the type dynamically because at this point in the stack we can't know
            the full type closure of the application.
            </remarks>
        </member>
        <member name="M:WinRT.TypeNameSupport.ParseGenericTypeName(System.ReadOnlySpan{System.Char})">
            <summary>
            Parses a type name from the start of a span including its generic parameters.
            </summary>
            <param name="partialTypeName">A span starting with a type name to parse.</param>
            <returns>Returns a tuple containing the simple type name of the type, and generic type parameters if they exist, and the index of the end of the type name in the span.</returns>
        </member>
        <member name="F:WinRT.TypeNameSupport.VisitedTypes">
            <summary>
            Tracker for visited types when determining a WinRT interface to use as the type name.
            Only used when GetNameForType is called with <see cref="F:WinRT.TypeNameGenerationFlags.NoCustomTypeName"/>.
            </summary>
        </member>
        <member name="T:WinRT.WinRTRuntimeErrorStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.Arg_IndexOutOfRangeException">
            <summary>
              Looks up a localized string similar to Index was outside the bounds of the array..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.Arg_KeyNotFound">
            <summary>
              Looks up a localized string similar to The given key was not present in the dictionary..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.Arg_KeyNotFoundWithKey">
            <summary>
              Looks up a localized string similar to The given key &apos;{0}&apos; was not present in the dictionary..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.Arg_RankMultiDimNotSupported">
            <summary>
              Looks up a localized string similar to Only single dimensional arrays are supported for the requested action..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.Argument_AddingDuplicate">
            <summary>
              Looks up a localized string similar to An item with the same key has already been added..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.Argument_AddingDuplicateWithKey">
            <summary>
              Looks up a localized string similar to An item with the same key has already been added. Key: {0}.
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.Argument_IndexOutOfArrayBounds">
            <summary>
              Looks up a localized string similar to The specified index is out of bounds of the specified array..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.Argument_InsufficientSpaceToCopyCollection">
            <summary>
              Looks up a localized string similar to The specified space is not sufficient to copy the elements from this Collection..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.ArgumentOutOfRange_Index">
            <summary>
              Looks up a localized string similar to Index was out of range. Must be non-negative and less than the size of the collection..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.ArgumentOutOfRange_IndexLargerThanMaxValue">
            <summary>
              Looks up a localized string similar to This collection cannot work with indices larger than Int32.MaxValue - 1 (0x7FFFFFFF - 1)..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.InvalidOperation_CannotRemoveLastFromEmptyCollection">
            <summary>
              Looks up a localized string similar to Cannot remove the last element from an empty collection..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.InvalidOperation_CollectionBackingDictionaryTooLarge">
            <summary>
              Looks up a localized string similar to The collection backing this Dictionary contains too many elements..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.InvalidOperation_CollectionBackingListTooLarge">
            <summary>
              Looks up a localized string similar to The collection backing this List contains too many elements..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.InvalidOperation_EnumEnded">
            <summary>
              Looks up a localized string similar to Enumeration already finished..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.InvalidOperation_EnumFailedVersion">
            <summary>
              Looks up a localized string similar to Collection was modified; enumeration operation may not execute..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.InvalidOperation_EnumNotStarted">
            <summary>
              Looks up a localized string similar to Enumeration has not started. Call MoveNext..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.NotSupported_KeyCollectionSet">
            <summary>
              Looks up a localized string similar to Mutating a key collection derived from a dictionary is not allowed..
            </summary>
        </member>
        <member name="P:WinRT.WinRTRuntimeErrorStrings.NotSupported_ValueCollectionSet">
            <summary>
              Looks up a localized string similar to Mutating a value collection derived from a dictionary is not allowed..
            </summary>
        </member>
        <member name="T:ABI.System.Collections.IList.ToAbiHelper.ListToBindableVectorViewAdapter">
            A Windows Runtime IBindableVectorView implementation that wraps around a managed IList exposing
            it to Windows runtime interop.
        </member>
        <member name="M:ABI.Windows.Foundation.ManagedIPropertyValueImpl.UnboxValue``1(System.Object)">
            <summary>
            Unbox a value of a projected Windows.Foundation struct type
            to a structurally equivalent type with the same name.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The object to unbox.</param>
            <returns>The unboxed value.</returns>
        </member>
        <member name="M:ABI.Windows.Foundation.ManagedIPropertyValueImpl.CoerceValue``1(System.Object)">
            <summary>
            Coerce the managd object to an object of type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="value">The value.</param>
            <returns>The coerced value.</returns>
        </member>
        <member name="T:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo">
            <summary><p>Provides factory methods to construct WinRT-compatible representations of asynchronous operations.</p>
            <p>The factory methods take as inputs functions (delegates) that provide managed Task objects;
            Different factory methods return different sub-interfaces of <code>Windows.Foundation.IAyncInfo</code>.
            When an asynchronous operation created by this factory is actually started (by calling <code>Start()</code>),
            the specified <code>Task</code>-provider delegate will be invoked to create the <code>Task</code> that will
            be wrapped by the to-WinRT adapter.</p> </summary>
        </member>
        <member name="M:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo.Run(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates and starts an <see cref="T:Windows.Foundation.IAsyncAction"/> instance from a function that generates
            a <see cref="T:System.Threading.Tasks.Task"/>.
            Use this overload if your task supports cancellation in order to hook-up the <code>Cancel</code>
            mechanism exposed by the created asynchronous action and the cancellation of your task.</summary>
            <param name="taskProvider">The function to invoke to create the task when the IAsyncInfo is started.
            The function is passed a <see cref="T:System.Threading.CancellationToken"/> that the task may monitor
            to be notified of a cancellation request;
            you may ignore the <code>CancellationToken</code> if your task does not support cancellation.</param>
            <returns>An unstarted <see cref="T:Windows.Foundation.IAsyncAction"/> instance. </returns>
        </member>
        <member name="M:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo.Run``1(System.Func{System.Threading.CancellationToken,System.IProgress{``0},System.Threading.Tasks.Task})">
            <summary>
            Creates and starts an <see cref="T:Windows.Foundation.IAsyncActionWithProgress`1"/> instance from a function
            that generates a <see cref="T:System.Threading.Tasks.Task"/>.
            Use this overload if your task supports cancellation and progress monitoring is order to:
            (1) hook-up the <code>Cancel</code> mechanism of the created asynchronous action and the cancellation of your task,
            and (2) hook-up the <code>Progress</code> update delegate exposed by the created async action and the progress updates
            published by your task.</summary>
            <param name="taskProvider">The function to invoke to create the task when the IAsyncInfo is started.
            The function is passed a <see cref="T:System.Threading.CancellationToken"/> that the task may monitor
            to be notified of a cancellation request;
            you may ignore the <code>CancellationToken</code> if your task does not support cancellation.
            It is also passed a <see cref="T:System.IProgress`1"/> instance to which progress updates may be published;
            you may ignore the <code>IProgress</code> if your task does not support progress reporting.</param>
            <returns>An unstarted <see cref="T:Windows.Foundation.IAsyncActionWithProgress`1"/> instance.</returns>
        </member>
        <member name="M:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo.Run``1(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates and starts  an <see cref="T:Windows.Foundation.IAsyncOperation`1"/> instance from a function
            that generates a <see cref="T:System.Threading.Tasks.Task`1"/>.
            Use this overload if your task supports cancellation in order to hook-up the <code>Cancel</code>
            mechanism exposed by the created asynchronous operation and the cancellation of your task.</summary>
            <param name="taskProvider">The function to invoke to create the task when the IAsyncInfo is started.
            The function is passed a <see cref="T:System.Threading.CancellationToken"/> that the task may monitor
            to be notified of a cancellation request;
            you may ignore the <code>CancellationToken</code> if your task does not support cancellation.</param>
            <returns>An unstarted <see cref="T:Windows.Foundation.IAsyncOperation`1"/> instance.</returns>
        </member>
        <member name="M:System.Runtime.InteropServices.WindowsRuntime.AsyncInfo.Run``2(System.Func{System.Threading.CancellationToken,System.IProgress{``1},System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates and starts  an <see cref="T:Windows.Foundation.IAsyncOperationWithProgress`2"/> instance
            from a function that generates a <see cref="T:System.Threading.Tasks.Task`1"/>.<br />
            Use this overload if your task supports cancellation and progress monitoring is order to:
            (1) hook-up the <code>Cancel</code> mechanism of the created asynchronous operation and the cancellation of your task,
            and (2) hook-up the <code>Progress</code> update delegate exposed by the created async operation and the progress
            updates published by your task.</summary>
            <typeparam name="TResult">The result type of the task.</typeparam>
            <typeparam name="TProgress">The type used for progress notifications.</typeparam>
            <param name="taskProvider">The function to invoke to create the task when the IAsyncOperationWithProgress is started.<br />
            The function is passed a <see cref="T:System.Threading.CancellationToken"/> that the task may monitor
            to be notified of a cancellation request;
            you may ignore the <code>CancellationToken</code> if your task does not support cancellation.
            It is also passed a <see cref="T:System.IProgress`1"/> instance to which progress updates may be published;
            you may ignore the <code>IProgress</code> if your task does not support progress reporting.</param>
            <returns>An unstarted <see cref="T:Windows.Foundation.IAsyncOperationWithProgress`2"/> instance.</returns>
        </member>
        <member name="T:System.Threading.Tasks.AsyncInfoIdGenerator">
            <summary>
            Reusable component to generate unique IDs for ann the different implementations of IAsyncInfo in this assembly.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.AsyncInfoIdGenerator.InvalidId">
            <summary>
            We will never generate this Id, so this value can be used as an invalid, uninitialised or a <em>no-Id</em> value.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.AsyncInfoIdGenerator.s_idGenerator">
            <summary>
            We want to avoid ending up with the same ID as a Windows-implemented async info.
            At the same time we want to be reproducible. So we use a random generator with a fixed seed.
            </summary>
        </member>
        <member name="M:System.Threading.Tasks.AsyncInfoIdGenerator.CreateNext">
            <summary>
            Generate a unique ID that can be used for an IAsyncInfo object.
            The returned value will never be equal to <code>AsyncInfoIdGenerator.InvalidId</code>.
            </summary>
            <returns>A new unique IAsyncInfo Id.</returns>
        </member>
        <member name="M:System.Threading.Tasks.AsyncInfoIdGenerator.EnsureInitializedThreadsafe(System.UInt32@)">
            <summary>
            Initialises the specified <code>id</code> to a unique Id-value that can be used for an IAsyncInfo object under the
            assumption that another thread may also attempt to initialise <code>id</code>. The thread that changes <code>id</code>
            first from <code>AsyncInfoIdGenerator.InvalidId</code> to another value wins and all other threads will respect that
            choice and leave <code>id</code> unchanged. The method returns the Id that was agreed upon by the race.
            </summary>
            <param name="id">The IAsyncInfo ID to initialise.</param>
            <returns>The unique value to which the specified reference target was initialised.</returns>
        </member>
        <member name="T:System.Threading.Tasks.TaskToAsyncInfoAdapter`4">
            <summary>
            Implements a wrapper that allows to expose managed <code>System.Threading.Tasks.Task</code> objects as
            through the WinRT <code>Windows.Foundation.IAsyncInfo</code> interface.
            </summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToAsyncInfoAdapter`4._cancelTokenSource">
            <summary>The token source used to cancel running operations.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToAsyncInfoAdapter`4._id">
            <summary>The async info's ID. InvalidAsyncId stands for not yet been initialised.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToAsyncInfoAdapter`4._error">
            <summary>The cached error code used to avoid creating several exception objects if the <code>ErrorCode</code>
            property is accessed several times. <code>null</code> indicates either no error or that <code>ErrorCode</code>
            has not yet been called.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToAsyncInfoAdapter`4._state">
            <summary>The state of the async info. Interlocked operations are used to manipulate this field.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToAsyncInfoAdapter`4._dataContainer">
            <summary>For IAsyncInfo instances that completed synchronously (at creation time) this field holds the result;
            for instances backed by an actual Task, this field holds a reference to the task generated by the task generator.
            Since we always know which of the above is the case, we can always cast this field to TResult in the former case
            or to one of Task or Task{TResult} in the latter case. This approach allows us to save a field on all IAsyncInfos.
            Notably, this makes us pay the added cost of boxing for synchronously completing IAsyncInfos where TResult is a
            value type, however, this is expected to occur rather rare compared to non-synchronously completed user-IAsyncInfos.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToAsyncInfoAdapter`4._completedHandler">
            <summary>Registered completed handler.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToAsyncInfoAdapter`4._progressHandler">
            <summary>Registered progress handler.</summary>
        </member>
        <member name="F:System.Threading.Tasks.TaskToAsyncInfoAdapter`4._startingContext">
            <summary>The synchronization context on which this instance was created/started. Used to callback invocations.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.#ctor(System.Delegate)">
            <summary>Creates an IAsyncInfo from the specified delegate. The delegate will be called to construct a task that will
            represent the future encapsulated by this IAsyncInfo.</summary>
            <param name="taskProvider">The task generator to use for creating the task.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.#ctor(System.Threading.Tasks.Task,System.Threading.CancellationTokenSource,System.Progress{`3})">
            <summary>
            Creates an IAsyncInfo from the Task object. The specified task represents the future encapsulated by this IAsyncInfo.
            The specified CancellationTokenSource and Progress are assumed to be the source of the specified Task's cancellation and
            the Progress that receives reports from the specified Task.
            </summary>
            <param name="underlyingTask">The Task whose operation is represented by this IAsyncInfo</param>
            <param name="underlyingCancelTokenSource">The cancellation control for the cancellation token observed
            by <code>underlyingTask</code>.</param>
            <param name="underlyingProgressDispatcher">A progress listener/pugblisher that receives progress notifications
            form <code>underlyingTask</code>.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.#ctor(`2)">
            <summary>
            Creates an IAsyncInfo from the specified result value. The IAsyncInfo is created in the Completed state and the
            specified <code>synchronousResult</code> is used as the result value.
            </summary>
            <param name="synchronousResult">The result of this synchronously completed IAsyncInfo.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.DangerousSetCompleted(`2)">
            <summary> This method sets the result on a *synchronously completed* IAsyncInfo.
            It does not try to deal with the inherit races: Use it only when constructing a synchronously
            completed IAsyncInfo in a desired state when you understand the threading conditions well.</summary>
            <param name="synchronousResult">The new result of this synchronously completed IAsyncInfo (may be <code>default(TResult)</code>)</param>
            <returns>FALSE if this IAsyncInfo has not actually completed synchronously and this method had no effects, TRUE otherwise.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.System#IProgress{TProgressInfo}#Report(`3)">
            <summary>Reports a progress update.</summary>
            <param name="value">The new progress value to report.</param>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.SetAsyncState(System.Int32,System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Sets the <code>m_state</code> bit field to reflect the specified async state with the corresponding STATE_XXX bit mask.
            </summary>
            <param name="newAsyncState">Must be one of the STATE_XXX (not STATEYYY_ZZZ !) constants defined in this class.</param>
            <param name="conditionBitMask">If <code>useCondition</code> is FALSE: this field is ignored.
                                           If <code>useCondition</code> is TRUE: Unless this value has at least one bit with <code>m_state</code> in
                                                                                 common, this method will not perform any action.</param>
            <param name="useCondition">If TRUE, use <code>conditionBitMask</code> to determine whether the state should be set;
                                       If FALSE, ignore <code>conditionBitMask</code>.</param>
            <param name="conditionFailed">If <code>useCondition</code> is FALSE: this field is set to FALSE;
                                          If <code>useCondition</code> is TRUE: this field indicated whether the specified <code>conditionBitMask</code>
                                                                                had at least one bit in common with <code>m_state</code> (TRUE)
                                                                                or not (FALSE).
                                          (!) Note that the meaning of this parameter to the caller is not quite the same as whether <code>m_state</code>
                                          is/was set to the specified value, because <code>m_state</code> may already have had the specified value, or it
                                          may be set and then immediately changed by another thread. The true meaning of this parameter is whether or not
                                          the specified condition did hold before trying to change the state.</param>
            <returns>The value at which the current invocation of this method left <code>m_state</code>.</returns>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.SetState(System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean@)">
            <summary>
            Sets the specified bits in the <code>m_state</code> bit field according to the specified bit-mask parameters.
            </summary>
            <param name="newStateSetMask">The bits to turn ON in the <code>m_state</code> bit field</param>
            <param name="newStateIgnoreMask">Any bits that are OFF in this value will get turned OFF,
                                             unless they are explicitly switched on by <code>newStateSetMask</code>.</param>
            <param name="conditionBitMask">If <code>useCondition</code> is FALSE: this field is ignored.
                                           If <code>useCondition</code> is TRUE: Unless this value has at least one bit with <code>m_state</code> in
                                                                                 common, this method will not perform any action.</param>
            <param name="useCondition">If TRUE, use <code>conditionBitMask</code> to determine whether the state should be set;
                                       If FALSE, ignore <code>conditionBitMask</code>.</param>
            <param name="conditionFailed">If <code>useCondition</code> is FALSE: this field is set to FALSE;
                                          If <code>useCondition</code> is TRUE: this field indicated whether the specified <code>conditionBitMask</code>
                                                                                had at least one bit in common with <code>m_state</code> (TRUE)
                                                                                or not (FALSE).
                                          (!) Note that the meaning of this parameter to the caller is not quite the same as whether <code>m_state</code>
                                          is/was set to the specified value, because <code>m_state</code> may already have had the specified value, or it
                                          may be set and then immediately changed by another thread. The true meaning of this parameter is whether or not
                                          the specified condition did hold before trying to change the state.</param>
            <returns>The value at which the current invocation of this method left <code>m_state</code>.</returns>
        </member>
        <member name="P:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.Completed">
             <summary>
             Gets or sets the completed handler.
            
             We will set the completion handler even when this IAsyncInfo is already started (no other choice).
             If we the completion handler is set BEFORE this IAsyncInfo completed, then the handler will be called upon completion as normal.
             If we the completion handler is set AFTER this IAsyncInfo already completed, then this setter will invoke the handler synchronously
             on the current context.
             </summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.Progress">
            <summary>Gets or sets the progress handler.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.Cancel">
            <summary>Cancels the async info.</summary>
        </member>
        <member name="M:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.Close">
            <summary>Close the async info.</summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.ErrorCode">
            <summary>Gets the error code for the async info.</summary>
        </member>
        <member name="P:System.Threading.Tasks.TaskToAsyncInfoAdapter`4.Status">
            <summary>Gets the status of the async info.</summary>
        </member>
        <member name="T:System.VoidReferenceTypeParameter">
            <summary>This can be used instead of <code>VoidValueTypeParameter</code> when a reference type is required.
            In case of an actual instantiation (e.g. through <code>default(T)</code>),
            using <code>VoidValueTypeParameter</code> offers better performance.</summary>
        </member>
    </members>
</doc>
